version: '3'

services:

  dbpointparserprod:
    container_name: dbpointparserprod
    image: dbpointparserprod
    build:
      context: ./
      dockerfile: ./Dockerfiles/postgres/Dockerfile
    restart: always
    ports:
      - 5432:5432
    volumes:
      - dbpointparserdev:/var/lib/postgresql/data
    networks:
      - networkpointparserprod

  apipointparserprod:
    container_name: apipointparserprod
    image: apipointparserprod
    build:
      context: ./
      dockerfile: ./Dockerfiles/flask/Dockerfile
    restart: always
    depends_on:
      - dbpointparserprod
    environment:
      - FLASK_CONFIG=production
      - PROD_CELERY_BROKER_URL=redis://redisbrokerpointparserprod:6379/0
      - PROD_RESULT_BACKEND=redis://redisbrokerpointparserprod:6379/1
      - PROD_DATABASE_URL=postgresql://${SNEG_DB_USER}:${SNEG_DB_PASSWORD}@dbpointparserprod:5432/sneg
      - YANDEX_API_TOKEN=${YANDEX_API_TOKEN}
      - SEARCH_MAP_TOKEN=${SEARCH_MAP_TOKEN}
    command: sh -c "sh ./sh/wait-for.sh --timeout=600 dbpointparserprod:5432 -- sh ./sh/boot.sh"
    ports:
      - 5000:5000
    networks:
      - networkpointparserprod

  redisbrokerpointparserprod:
    container_name: redisbrokerpointparserprod
    image: redisbrokerpointparserprod
    build:
      context: ./
      dockerfile: ./Dockerfiles/redis/Dockerfile
    restart: always
    command: redis-server
    ports:
      - 6379:6379
    networks:
      - networkpointparserprod

  celerybeatpointparserprod:
    container_name: celerybeatpointparserprod
    image: celerybeatpointparserprod
    build:
      context: ./
      dockerfile: ./Dockerfiles/flask/Dockerfile
    restart: always
    depends_on:
      - redisbrokerpointparserprod
    environment:
      - FLASK_CONFIG=production
      - PROD_CELERY_BROKER_URL=redis://redisbrokerpointparserprod:6379/0
      - PROD_RESULT_BACKEND=redis://redisbrokerpointparserprod:6379/1
      - PROD_DATABASE_URL=postgresql://${SNEG_DB_USER}:${SNEG_DB_PASSWORD}@dbpointparserprod:5432/sneg
      - YANDEX_API_TOKEN=${YANDEX_API_TOKEN}
      - SEARCH_MAP_TOKEN=${SEARCH_MAP_TOKEN}
    command: [ "celery", "--app=app.celery.celery_app.celery_app", "beat", "--loglevel=DEBUG" ]
    networks:
      - networkpointparserprod

  celeryschedulerpointparserprod:
    container_name: celeryschedulerpointparserprod
    image: celeryschedulerpointparserprod
    build:
      context: ./
      dockerfile: ./Dockerfiles/flask/Dockerfile
    restart: always
    depends_on:
      - redisbrokerpointparserprod
    environment:
      - FLASK_CONFIG=production
      - PROD_CELERY_BROKER_URL=redis://redisbrokerpointparserprod:6379/0
      - PROD_RESULT_BACKEND=redis://redisbrokerpointparserprod:6379/1
      - PROD_DATABASE_URL=postgresql://${SNEG_DB_USER}:${SNEG_DB_PASSWORD}@dbpointparserprod:5432/sneg
      - YANDEX_API_TOKEN=${YANDEX_API_TOKEN}
      - SEARCH_MAP_TOKEN=${SEARCH_MAP_TOKEN}
    command: [ "celery", "--app=app.celery.celery_app.celery_app", "worker", "--hostname=scheduler", "--loglevel=DEBUG", "--max-tasks-per-child=1", "--concurrency=4", "--without-gossip", "--without-mingle", "--task-events", "-Ofair", "--queues=schedulerq" ]
    networks:
      - networkpointparserprod

  celeryworkerpointparserprod:
    container_name: celeryworkerpointparserprod
    image: celeryworkerpointparserprod
    build:
      context: ./
      dockerfile: ./Dockerfiles/flask/Dockerfile
    restart: always
    depends_on:
      - redisbrokerpointparserprod
    environment:
      - FLASK_CONFIG=production
      - PROD_CELERY_BROKER_URL=redis://redisbrokerpointparserprod:6379/0
      - PROD_RESULT_BACKEND=redis://redisbrokerpointparserprod:6379/1
      - PROD_DATABASE_URL=postgresql://${SNEG_DB_USER}:${SNEG_DB_PASSWORD}@dbpointparserprod:5432/sneg
      - YANDEX_API_TOKEN=${YANDEX_API_TOKEN}
      - SEARCH_MAP_TOKEN=${SEARCH_MAP_TOKEN}
    command: [ "celery", "--app=app.celery.celery_app.celery_app", "worker", "--hostname=worker", "--loglevel=DEBUG", "--max-tasks-per-child=1", "--concurrency=20", "--without-gossip", "--without-mingle", "--task-events", "-Ofair", "--queues=workerq" ]
    networks:
      - networkpointparserprod

  flowerpointparserprod:
    container_name: flowerpointparserprod
    image: flowerpointparserprod
    build:
      context: ./
      dockerfile: ./Dockerfiles/flower/Dockerfile
    restart: always
    depends_on:
      - redisbrokerpointparserprod
      - celerybeatpointparserprod
      - celeryschedulerpointparserprod
      - celeryworkerpointparserprod
    environment:
      - FLOWER_PORT=5555
      - FLOWER_URL_PREFIX=flower
    command: [ "flower", "--broker=redis://:@redisbrokerpointparserprod:6379/0", "--enable_events=False", "â€“logging=DEBUG", "--port=5555" ]
    ports:
      - 5555:5555
    networks:
      - networkpointparserprod

volumes:
  dbpointparserdev:

networks:
  networkpointparserprod: